# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vid.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtGui
from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap
import sys
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import cv2
import numpy as np
import time
import PoseModule as pm
from PyQt5 import QtCore, QtGui, QtWidgets


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def run(self):
        location = f'Videos/{self.workout}/{self.file}'
        cap = cv2.VideoCapture(location)
        newlocation = 'Finished/' + self.workout + '_' + self.file
        result = cv2.VideoWriter(newlocation, cv2.VideoWriter_fourcc(*'MJPG'), 30, (1280, 720))

        detector = pm.poseDetector()
        count = 0
        """0 - going down, 1 - going up"""
        direction = 0
        start = time.time()
        brown = (48, 0, 73)
        blue = (214, 50, 40)
        orange = (247, 127, 0)
        lightBlue = (252, 181, 73)
        white = (255, 255, 255)
        red = (0, 0, 255)
        barColor = blue

        spineCorrection = ""
        shoulderCorrection = ""

        elbowUpCorrection = ""
        elbowDownCorrection = ""

        legUpCorrection1 = ""
        legUpCorrection2 = ""
        legDownCorrection = ""
        hipUpCorrection1 = ""
        hipUpCorrection2 = ""
        hipDownCorrection = ""

        hipBottomAngle = []
        minHipAngle = {}
        hipTopAngle = []
        maxHipAngle = {}

        bottomLegAngle = []
        minBottomLegAngle = {}
        topLegAngle = []
        maxTopLegAngle = {}

        elbowDownAngle = []
        minElbowDownAngle = {}
        elbowUpAngle = []
        maxElbowUpAngle = {}

        startPosition = False
        while True:
            try:
                success, img = cap.read()
                # img = cv2.imread("pic/tricep/1.jpeg")
                img = cv2.flip(img, 1)
                # img = cv2.resize(img, (480, 720))
                img = cv2.resize(img, (1280, 720))
                img = detector.findPose(img, False)
                lmList = detector.findPosition(img, False)
                if len(lmList) != 0:
                    elbowAngle = detector.findAngle(img, 11, 13, 15)
                    legAngle = detector.findAngle(img, 23, 25, 27)

                    spineAngle = detector.findAngle(img, 7, 11, 23, False)
                    shoulderAngle = detector.findAngle(img, 13, 11, 23)
                    hipAngle = detector.findAngle(img, 11, 23, 25)

                    heelAngle = detector.findAngle(img, 25, 29, 31)

                    per = np.interp(elbowAngle, (120, 150), (0, 100))
                    bar = np.interp(elbowAngle, (120, 150), (650, 100))

                    if int(spineAngle) > 150 and int(heelAngle) < 95:
                        startPosition = True

                        if startPosition:
                            if per == 100:
                                barColor = lightBlue
                                if direction == 0:
                                    count += 0.5
                                    direction = 1
                            if per == 0:
                                barColor = lightBlue
                                if direction == 1:
                                    count += 0.5
                                    direction = 0

                            if int(count) > 0:
                                # if int(spineAngle) > 170:
                                #     spineCorrection = "Dont over your neck"
                                if int(spineAngle) < 160:
                                    spineCorrection = "look straight forward"
                                    # test.append(spineAngle)
                                if int(shoulderAngle) > 90:
                                    shoulderCorrection = "move closer to chair"

                                # if int(hipAngle) < 90:
                                #     spineCorrection = "Fix your form"

                                if direction == 0:
                                    topLegAngle.append(round(legAngle))
                                    maxTopLegAngle[count] = []
                                    maxTopLegAngle[count] += topLegAngle

                                    elbowUpAngle.append(round(elbowAngle))
                                    maxElbowUpAngle[count] = []
                                    maxElbowUpAngle[count] += elbowUpAngle

                                    hipTopAngle.append(round(legAngle))
                                    maxHipAngle[count] = []
                                    maxHipAngle[count] += hipTopAngle

                                    for key, value in maxTopLegAngle.items():
                                        if max(value) < 80:
                                            legUpCorrection1 = "dont put ur butt too close to the chair"
                                        if max(value) > 105:
                                            legUpCorrection2 = "don't extend legs too much, make it 90 degrees"

                                    for key, value in maxElbowUpAngle.items():
                                        if max(value) < 150:
                                            elbowUpCorrection = "Straighten your arms more"

                                    for key, value in maxHipAngle.items():
                                        if max(value) > 130:
                                            hipUpCorrection1 = "dont over extend your hips"
                                        if max(value) < 110:
                                            hipUpCorrection2 = "move your hips farther from chair"

                                """ERRORS direction = 1 | going up"""
                                if direction == 1:  # going up
                                    bottomLegAngle.append(round(legAngle))
                                    minBottomLegAngle[count] = []
                                    minBottomLegAngle[count] += bottomLegAngle

                                    elbowDownAngle.append(round(elbowAngle))
                                    minElbowDownAngle[count] = []
                                    minElbowDownAngle[count] += elbowDownAngle

                                    for key, value in minBottomLegAngle.items():
                                        if min(value) > 80:
                                            legDownCorrection = "lower your legs more, you only did half dips"

                                    for key, value in minElbowDownAngle.items():
                                        if min(value) > 100:
                                            elbowDownCorrection = "lower more. you only did half dips"

                                    for key, value in minHipAngle.items():
                                        if min(value) > 90:
                                            hipDownCorrection = "lower your hips more"

                    # Draw Bar
                    cv2.rectangle(img, (1100, 100), (1175, 650), barColor, 3)
                    cv2.rectangle(img, (1100, int(bar)), (1175, 650), barColor, cv2.FILLED)
                    cv2.putText(img, f'{int(per)} %', (1100, 75), cv2.FONT_HERSHEY_PLAIN, 4,
                                barColor, 4)

                    corrections = [shoulderCorrection, elbowUpCorrection, elbowDownCorrection, hipUpCorrection1,
                                   hipUpCorrection2, hipDownCorrection, spineCorrection, legUpCorrection1,
                                   legUpCorrection2, legDownCorrection]
                    for x, correction in enumerate(corrections):
                        cv2.putText(img, correction, (10, (int(x) * 50) + 150), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)

                    # Draw Count
                    cv2.rectangle(img, (5, 5), (150, 100), lightBlue, cv2.FILLED)
                    cv2.putText(img, str(int(count)), (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 3,
                                blue, 10)

                end = time.time()
                duration = end - start
                cv2.putText(img, f"Time: {round(duration, 1)} secs", (170, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                            brown, 2)

                result.write(img)
                if success:
                    self.change_pixmap_signal.emit(img)
            except:
                # print("error")
                cap.release()
                cv2.destroyAllWindows()


class TricepDips(object):
    def __init__(self, workout, file):
        self.workout = workout
        self.file = file

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 980)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(6, 2, 1280, 720))
        self.image_label.setObjectName("image_label")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 740, 711, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowTitle(self.workout)
        self.display_width = 1280
        self.display_height = 720
        # self.image_label = QLabel(self)
        self.image_label.resize(self.display_width, self.display_height)

        self.thread = VideoThread()
        self.thread.workout = self.workout
        self.thread.file = self.file
        self.thread.change_pixmap_signal.connect(self.update_image)
        self.thread.start()

    def update_image(self, img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = TricepDips("bicyclecrunch", "1.mp4")
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    print(ui.newlocation)
