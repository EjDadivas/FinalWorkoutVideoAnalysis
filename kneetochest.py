# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vid.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtGui
from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap
import sys
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread
import cv2
import numpy as np
import time
import PoseModule as pm
from PyQt5 import QtCore, QtGui, QtWidgets


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def run(self):
        location = f'Videos/{self.workout}/{self.file}'
        cap = cv2.VideoCapture(location)
        newlocation = 'Finished/' + self.workout + '_' + self.file
        result = cv2.VideoWriter(newlocation, cv2.VideoWriter_fourcc(*'MJPG'), 30, (1280, 720))

        detector = pm.poseDetector()
        count = 0
        """0 - going down, 1 - going elbowUp"""
        direction = 0
        start = time.time()
        brown = (48, 0, 73)
        blue = (214, 50, 40)
        orange = (247, 127, 0)
        lighterblue = (252, 181, 73)
        white = (255, 255, 255)
        red = (0, 0, 255)
        barColor = blue

        legCorrection = ""
        hipCorrection = ""
        elbowCorrection = ""
        spineCorrection = ""
        starting = ""
        startPosition = False
        while True:
            try:
                success, img = cap.read()
                img = cv2.resize(img, (1280, 720))
                img = detector.findPose(img, False)
                lmList = detector.findPosition(img, False)

                if len(lmList) != 0:
                    elbowAngle = detector.findAngle(img, 11, 13, 15)
                    hipAngle = detector.findAngle(img, 11, 23, 25)
                    legAngle = detector.findAngle(img, 23, 25, 27)
                    heelAngle = detector.findAngle(img, 25, 29, 31)
                    spineAngle = detector.findAngle(img, 7, 11, 23)

                    if int(hipAngle) < 45 and int(legAngle) < 45 and int(spineAngle) > 160:
                        startPosition = True
                        print("true")
                        """ Counter for the push elbowUp"""
                        starting = "start..."
                        if startPosition:
                            if legAngle > 45:
                                legCorrection = "Fold your legs more"

                            if hipAngle > 45:
                                hipCorrection = "put your knees closer to your body"

                            # if elbowAngle < 160:
                            #     elbowCorrection = "extend your arms more"

                            if spineAngle < 150:
                                spineCorrection = "dont bend neck"

                            print(time.time())

                    corrections = [starting, legCorrection, hipCorrection, elbowCorrection, spineCorrection]
                    for x, correction in enumerate(corrections):
                        cv2.putText(img, correction, (10, (int(x) * 50) + 150), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)

                end = time.time()
                duration = end - start
                cv2.putText(img, f"Time: {round(duration, 1)} secs", (170, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                            brown, 2)
                result.write(img)
                if success:
                    self.change_pixmap_signal.emit(img)
            except:
                # print("error")
                cap.release()
                cv2.destroyAllWindows()


class KneeToChest(object):
    def __init__(self, workout, file):
        self.workout = workout
        self.file = file

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 980)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(6, 2, 1280, 720))
        self.image_label.setObjectName("image_label")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 740, 711, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowTitle(self.workout)
        self.display_width = 1280
        self.display_height = 720
        # self.image_label = QLabel(self)
        self.image_label.resize(self.display_width, self.display_height)

        self.thread = VideoThread()
        self.thread.workout = self.workout
        self.thread.file = self.file
        self.thread.change_pixmap_signal.connect(self.update_image)
        self.thread.start()

    def update_image(self, img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = KneeToChest("bicyclecrunch", "1.mp4")
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    print(ui.newlocation)
