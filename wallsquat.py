# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vid.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import time
import math
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, Qt, QThread
from PyQt5.QtGui import QPixmap

import PoseModule as pm


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)
    def run(self):
        location = f'Videos/{self.workout}/{self.file}.mp4'
        cap = cv2.VideoCapture(location)
        # newlocation = 'Finished/' + self.workout + '_' + self.file
        # result = cv2.VideoWriter(newlocation, cv2.VideoWriter_fourcc(*'MJPG'), 30, (1280, 720))
        detector = pm.poseDetector()
        count = 0
        """0 - going down, 1 - going up"""
        direction = 0
        start = time.time()
        brown = (48, 0, 73)
        blue = (214, 50, 40)
        orange = (247, 127, 0)
        lightBlue = (252, 181, 73)
        white = (255, 255, 255)
        red = (0, 0, 255)
        barColor = blue
        text = []
        corrections = []

        bottomLegAngle = []
        minBottomLegAngle = {}
        topLegAngle = []
        maxTopLegAngle = {}

        while True:
            try:
                success, img = cap.read()
                # img = cv2.imread("pic/wall/4.jpg")
                img = cv2.flip(img, 1)
                # img = cv2.resize(img, (480, 720))
                img = cv2.resize(img, (1280, 720))
                img = detector.findPose(img, False)
                lmList = detector.findPosition(img, False)
                if len(lmList) != 0:
                    """The basis for correctness and counting of push ups"""
                    legAngle = detector.findAngle(img, 23, 25, 27)
                    """Checking the Form"""
                    spineAngle = detector.findAngle(img, 7, 11, 23)
                    shoulderAngle = detector.findAngle(img, 13, 11, 23)
                    hipAngle = detector.findAngle(img, 11, 23, 25)

                    per = np.interp(legAngle, (100, 160), (0, 100))
                    bar = np.interp(legAngle, (100, 160), (650, 100))

                    if int(spineAngle) > 150:

                        if per == 0:
                            barColor = lightBlue
                            if direction == 0:
                                count += 0.5
                                direction = 1
                        if per == 100:
                            barColor = lightBlue
                            if direction == 1:
                                count += 0.5
                                direction = 0

                        if int(count) > 0:
                            if int(spineAngle) > 170:
                                spineCorrection = "Dont over your neck"
                                text.append(f"{spineCorrection} at {math.ceil(count)}")
                                corrections.append(spineCorrection)
                            if int(spineAngle) < 130:
                                spineCorrection2 = "Don't look down"
                                text.append(f"{spineCorrection2} at {math.ceil(count)}")
                                corrections.append(spineCorrection2)
                                # test.append(spineAngle)
                            if int(shoulderAngle) not in range(150, 190):
                                shoulderCorrection = "Rest your shoulders"
                                text.append(f"{shoulderCorrection} at {math.ceil(count)}")
                                corrections.append(shoulderCorrection)

                            if int(hipAngle) < 90:
                                spineCorrection = "Fix your form"
                                text.append(f"{spineCorrection} at {math.ceil(count)}")
                                corrections.append(spineCorrection)

                            if direction == 0:
                                topLegAngle.append(round(legAngle))
                                maxTopLegAngle[count] = []
                                maxTopLegAngle[count] += topLegAngle

                            """ERRORS direction = 1 | going up"""
                            if direction == 1:  # going up
                                bottomLegAngle.append(round(legAngle))
                                minBottomLegAngle[count] = []
                                minBottomLegAngle[count] += bottomLegAngle

                            for key, value in minBottomLegAngle.items():
                                if min(value) > 90:
                                    legdownCorrection = "go deeper"
                                    text.append(f"{legdownCorrection} at {math.ceil(count)}")
                                    corrections.append(legdownCorrection)
                            for key, value in maxTopLegAngle.items():
                                if max(value) < 150:
                                    legTopCorrection1 = "higher"
                                    text.append(f"{legTopCorrection1} at {math.ceil(count)}")
                                    corrections.append(legTopCorrection1)
                                if max(value) > 180:
                                    legTopCorrection2 = "don't lock your knees"
                                    text.append(f"{legTopCorrection2} at {math.ceil(count)}")
                                    corrections.append(legTopCorrection2)
                    # Draw Bar
                        cv2.rectangle(img, (1100, 100), (1175, 650), barColor, 3)
                        cv2.rectangle(img, (1100, int(bar)), (1175, 650), barColor, cv2.FILLED)
                        cv2.putText(img, f'{int(per)} %', (1100, 75), cv2.FONT_HERSHEY_PLAIN, 4,
                                    barColor, 4)

                        # corrections = [hipCorrection1, hipCorrection2, legTopCorrection1, legTopCorrection2, legdownCorrection,
                        #                spineCorrection]
                        corrections = list(dict.fromkeys(corrections))
                        for x, correction in enumerate(corrections):
                            cv2.putText(img, correction, (10, (int(x) * 50) + 150), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, hipCorrection1, (10, 200), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, hipCorrection2, (10, 250), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, spineCorrection, (10, 300), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, legdownCorrection, (10, 350), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, legTopCorrection1, (10, 400), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)
                        # cv2.putText(img, legTopCorrection2, (10, 450), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)

                        # Draw Count
                        cv2.rectangle(img, (5, 5), (150, 100), lightBlue, cv2.FILLED)
                        cv2.putText(img, str(int(count)), (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 3,
                                    blue, 10)
                        cv2.imwrite(f"Finished/{self.workout}_{self.file}.jpg", img)

                end = time.time()
                duration = end - start
                cv2.putText(img, f"Time: {round(duration, 1)} secs", (170, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                            brown, 2)

                # result.write(img)

                if success:
                    self.change_pixmap_signal.emit(img)
                    print(corrections)
                    text.sort()
                    text = list(dict.fromkeys(text))
                    print(text)
                    with open(f"Finished/{self.workout}_{self.file}.txt", "w") as textfile:
                        textfile.write(f"Total count: {math.ceil(count)}\n")
                        for items in text:
                            textfile.write(f"{items}\n")
            except:
                # print("error")
                cap.release()
                cv2.destroyAllWindows()


class WallSquat(object):
    def __init__(self, workout, file):
        self.workout = workout
        self.file = file

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(6, 2, 1280, 720))
        self.image_label.setObjectName("image_label")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 740, 711, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowTitle(self.workout)
        self.display_width = 1280
        self.display_height = 720
        # self.image_label = QLabel(self)
        self.image_label.resize(self.display_width, self.display_height)

        self.thread = VideoThread()
        self.thread.workout = self.workout
        self.thread.file = self.file
        self.thread.change_pixmap_signal.connect(self.update_image)
        self.thread.start()

    def update_image(self, img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = WallSquat("wallsquats", "1")
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
    print(ui.newlocation)
