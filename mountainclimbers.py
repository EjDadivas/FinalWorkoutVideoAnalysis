# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vid.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread, QMutex, QWaitCondition
import cv2
import numpy as np
import time
import PoseModule as pm
from PyQt5 import QtCore, QtGui, QtWidgets


class VideoThread(QThread):
    change_pixmap_signal = pyqtSignal(np.ndarray)

    def run(self):
        location = f'Videos/{self.workout}/{self.file}.mp4'
        cap = cv2.VideoCapture(location)
        print(location)
        # result = cv2.VideoWriter('Finished/' + self.workout + '_' + self.file,
        #                          cv2.VideoWriter_fourcc(*'MJPG'),
        #                          30, (1280, 720))
        detector = pm.poseDetector()
        count = 0
        """0 - going down, 1 - going up"""
        directionR = 0
        directionL = 0
        start = time.time()
        brown = (48, 0, 73)
        blue = (214, 50, 40)
        orange = (247, 127, 0)
        lightBlue = (252, 181, 73)
        white = (255, 255, 255)
        red = (0, 0, 255)
        barColor = blue
        text = []
        corrections = []

        leftTopCorrection = ""
        leftDownCorrection = ""
        rightTopCorrection = ""
        rightDownCorrection = ""

        elbowCorrection = ""

        shoulderCorrection = ""
        spineCorrection = ""

        bottomLegLeftAngle = []
        minBottomLegLeftAngle = {}
        topLegLeftAngle = []
        maxTopLegLeftAngle = {}

        bottomLegRightAngle = []
        minBottomLegRightAngle = {}
        topLegRightAngle = []
        maxTopLegRightAngle = {}

        while True:
            try:
                success, img = cap.read()
                img = cv2.resize(img, (1280, 720))
                img = detector.findPose(img, False)
                lmList = detector.findPosition(img, False)
                if len(lmList) != 0:
                    """The basis for correctness and counting of push ups"""
                    elbowAngle = detector.findAngle(img, 11, 13, 15)
                    legLeftAngle = detector.findAngle(img, 23, 25, 27)
                    legRightAngle = detector.findAngle(img, 24, 26, 28)
                    """Checking the Form"""
                    spineAngle = detector.findAngle(img, 7, 11, 23, False)
                    shoulderAngle = detector.findAngle(img, 13, 11, 23)
                    hipAngle = detector.findAngle(img, 11, 23, 25)

                    perLeft = np.interp(legLeftAngle, (60, 150), (0, 100))
                    perRight = np.interp(legRightAngle, (60, 150), (0, 100))
                    # bar = np.interp(legLeftAngle, (90, 160), (650, 100))

                    if int(shoulderAngle) in range(60, 100) and int(elbowAngle) > 150:
                        if perLeft == 0:
                            barColor = lightBlue
                            if directionL == 0:
                                count += 0.5
                                directionL = 1
                        if perLeft == 100:
                            barColor = lightBlue
                            if directionL == 1:
                                count += 0.5
                                directionL = 0

                        if perRight == 0:
                            barColor = lightBlue
                            if directionR == 0:
                                count += 0.5
                                directionR = 1
                        if perRight == 100:
                            barColor = lightBlue
                            if directionR == 1:
                                count += 0.5
                                directionR = 0

                        if int(count) > 0:
                            if int(spineAngle) not in range(150, 190):
                                spineCorrection = "Straighten your back and look in front"
                                text.append(f"{spineCorrection} at {math.ceil(count)}")
                                corrections.append(spineCorrection)

                            if int(shoulderAngle) not in range(60, 90):
                                shoulderCorrection = "Straighten back and shoulders."
                                text.append(f"{shoulderCorrection} at {math.ceil(count)}")
                                corrections.append(shoulderCorrection)
                            if int(elbowAngle) not in range(150, 190):
                                elbowCorrection = "Straighen your arms "
                                text.append(f"{elbowCorrection} at {math.ceil(count)}")
                                corrections.append(elbowCorrection)

                            if directionL == 0:
                                bottomLegLeftAngle.append(round(legLeftAngle));
                                minBottomLegLeftAngle[count] = []
                                minBottomLegLeftAngle[count] += bottomLegLeftAngle

                            """ERRORS direction = 1 | going up"""
                            if directionL == 1:  # going up
                                topLegLeftAngle.append(round(legLeftAngle));
                                maxTopLegLeftAngle[count] = []
                                maxTopLegLeftAngle[count] += topLegLeftAngle

                            for key, value in minBottomLegLeftAngle.items():
                                if min(value) > 90:
                                    print('folded:', max(value), count)
                                    leftDownCorrection = "left leg should be closeer to elbow"
                                    text.append(f"{leftDownCorrection} at {math.ceil(count)}")
                                    corrections.append(leftDownCorrection)

                            for key, value in maxTopLegLeftAngle.items():
                                if max(value) < 130:
                                    print('extended: ', max(value), count)
                                    leftTopCorrection = f"extend your left leg more"
                                    text.append(f"{leftTopCorrection} at {math.ceil(count)}")
                                    corrections.append(leftTopCorrection)

                            if directionR == 0:
                                topLegRightAngle.append(round(legRightAngle));
                                maxTopLegRightAngle[count] = []
                                maxTopLegRightAngle[count] += topLegRightAngle

                            if directionR == 1:  # going up
                                bottomLegRightAngle.append(round(legRightAngle));
                                minBottomLegRightAngle[count] = []
                                minBottomLegRightAngle[count] += bottomLegRightAngle

                            for key, value in minBottomLegRightAngle.items():
                                if min(value) > 90:
                                    rightDownCorrection = "Right leg should be closeer to elbow"
                                    text.append(f"{rightDownCorrection} at {math.ceil(count)}")
                                    corrections.append(rightDownCorrection)

                            for key, value in maxTopLegRightAngle.items():
                                if max(value) < 150:
                                    rightTopCorrection = "extend your Right leg more"
                                    text.append(f"{rightTopCorrection} at {math.ceil(count)}")
                                    corrections.append(rightTopCorrection)

                        corrections = list(dict.fromkeys(corrections))
                        for x, correction in enumerate(corrections):
                            cv2.putText(img, correction, (10, (int(x) * 50) + 150), cv2.FONT_HERSHEY_SIMPLEX, 1, red, 2)

                        cv2.rectangle(img, (5, 5), (150, 100), lightBlue, cv2.FILLED)
                        cv2.putText(img, str(int(count)), (20, 80), cv2.FONT_HERSHEY_SIMPLEX, 3,
                                    blue, 10)
                        cv2.imwrite(f"Finished/{self.workout}_{self.file}.jpg", img)
                end = time.time()
                duration = end - start
                cv2.putText(img, f"Time: {round(duration, 1)} secs", (170, 50), cv2.FONT_HERSHEY_SIMPLEX, 1,
                            brown, 2)
                # result.write(img)
                if success:
                    self.change_pixmap_signal.emit(img)
                    # print(corrections)
                    text.sort()
                    text = list(dict.fromkeys(text))
                    with open(f"Finished/{self.workout}_{self.file}.txt", "w") as textfile:
                        textfile.write(f"Total count: {math.ceil(count)}\n")
                        for items in text:
                            textfile.write(f"{items}\n")
            except:
                # print("error")
                cap.release()
                cv2.destroyAllWindows()


class MountainClimbers(object):
    def __init__(self, workout, file):
        self.workout = workout
        self.file = file

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.image_label = QtWidgets.QLabel(self.centralwidget)
        self.image_label.setGeometry(QtCore.QRect(6, 2, 1280, 720))
        self.image_label.setObjectName("image_label")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 740, 711, 16))
        self.label.setObjectName("label")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setWindowTitle(self.workout)
        self.display_width = 1280
        self.display_height = 720
        # self.image_label = QLabel(self)
        self.image_label.resize(self.display_width, self.display_height)

        self.thread = VideoThread()
        self.thread.workout = self.workout
        self.thread.file = self.file

        self.thread.change_pixmap_signal.connect(self.update_image)
        self.thread.start()

    def update_image(self, img):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt(img)
        self.image_label.setPixmap(qt_img)

    def convert_cv_qt(self, img):
        """Convert from an opencv image to QPixmap"""
        rgb_image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        h, w, ch = rgb_image.shape
        bytes_per_line = ch * w
        convert_to_Qt_format = QtGui.QImage(rgb_image.data, w, h, bytes_per_line, QtGui.QImage.Format_RGB888)
        p = convert_to_Qt_format.scaled(self.display_width, self.display_height, Qt.KeepAspectRatio)
        return QPixmap.fromImage(p)


#     text file for correcitons

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = MountainClimbers("mountainclimbers", "1")
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
